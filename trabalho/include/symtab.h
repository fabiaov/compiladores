/**@<symtab.h>::**/

/**
	Grupo 06 
	integrantes: F·bio VinÌcius Luciano da Silva, Jo„o Victor Fleming, Alexandre dos Anjos Souza
**/

/**
 * Aqui ser√° modelada a tabela de s√≠mbolos, nome geral symtab[SYMTAB_MAX_ENTRIES],
 * e seus atributos estruturais e funcionais:
 * 1) char *symtab.name armazena o s√≠mbolo que foi cadastrado a partir de
 *    lexeme;
 * 2) int symtab.address armazena o descritor (√≠ndice) da mem√≥ria da 
 *    calculadora -- esta √© um array de double, com mesmo n√∫mero de 
 *    entradas que na tabela symtab;
 * 3) int symtab_lookup(const char *name) √© o atributo funcional de busca
 *    do s√≠mbolo que deve se encontrar na tabela -- se n√£o for encontrado,
 *    a fun√ß√£o deve sinalizar um erro para que o s√≠mbolo seja cadastrado]
 *    como uma nova entrada, seja para consulta, seja para armazenamento --
 *    vejam como funciona no comando interativo "bc" do Unix/Linux;
 * 4) int symtab_append(const char *name) p√µe no ap√™ndice de symtab o novo
 *    s√≠mbolo name -- esta fun√ß√£o deve ser invocada sempre que o s√≠mbolo 
 *    em lexeme ainda n√£o existir, vide Item 3;
 * 5) int symtab_next_entry √© um ponteiro (cursor) que aponta para a pr√≥xima
 *    entrada dispon√≠vel em symtab (defina o tamanho m√°ximo da tabela com
 *    #define SYMTAB_MAX_ENTRIES <tamanho definido pelo programador> -- por
 *    exemplo, #define SYMTAB_MAX_ENTRIES 1024 s√≥ vai admitir um m√°ximo de
 *    1024 vari√°veis da calculadora mybc;
 * 6) double vmemory[SYMTAB_MAX_ENTRIES] √© a mem√≥ria virtual da calculadora
 *    e deve estar casada (mesmo descritor) com a tabela symtab[SYMTAB_MAX_ENTRIES].
 *
 *    Com base no que foi descrito acima, symtab √© sempre consultada toda vez que um
 *    s√≠mbolo (name) aparece no parser (vide linhas onde isso deve ser considerado --
 *    dica: antigos store e recall). Se o s√≠mbolo existir, este √© consultado pela 
 *    pseudo instru√ß√£o "recall" (isso √© denotado por uma fun√ß√£o C de mesmo nome). Se
 *    o s√≠mbolo n√£o existir, seja para consulta (recall), seja para armazenamento 
 *    (store), este s√≠mbolo deve ser automaticamente cadastrado -- qual deve ser o 
 *    valor inicial?
 *
 *    Uma vez implementado o mecanismo de uso da tabela de s√≠mbolos, estudem as 
 *    linhas do parser onde ser√£o inseridas as a√ß√µes sem√¢nticas dirigidas por 
 *    sintaxe para busca e manuten√ß√£o da tabela de s√≠mbolos -- isso ser√° essencial
 *    para o funcionamento da calculadora mybc.
 *
 *    Na aula de hoje, fa√ßam testes. Inicialmente para um interpretador simples
 *    de express√µes, cujo s√≠mbolo inicial √© E no diagrama sint√°tico, ou na gram√°tica
 *    LL(1). Em seguida, voc√™s far√£o testes com o diagrama sint√°tico (gram√°tica) mais 
 *    abrangente, que usa o n√£o terminal mybc como s√≠mbolo inicial -- este denota
 *    o interpretador propriamente dito a menos de uns detalhes operacionais que ficar√£o
 *    como pesquisa. */


/*** Parte implementada somente no ./include/symtab.h: ***/

#include <lexer.h> /** por causa da constante MAXIDSIZE: **/
typedef struct __symtab__ {
	char name[MAXIDSIZE+1];
	int address;
} SYMTAB;
#define SYMTAB_MAX_ENTRIES 0x100000 /** 1 mega posi√ß√µes na tabela */ 
extern char symtab[MAXIDSIZE+1][SYMTAB_MAX_ENTRIES];

/*** Parte a ser implementada no symtab.c: ***/

// extern SYMTAB symtab[SYMTAB_MAX_ENTRIES]; /** as SYMTAB_MAX_ENTRIES inst√¢ncias da tabela de s√≠mbolos */
extern int symtab_lookup(const char *name); /** busca o nome e retorna a posi√ß√£o encontrada; se n√£o encontrar, retorna -1 */
extern int symtab_append(const char *name); /** concatena (p√µe no ap√™ndice) a nova entrada (cuidado com duplicatas) */
extern int symtab_next_entry; /** primeira posi√ß√£o na tabela √© 0 */
extern double vmemory[SYMTAB_MAX_ENTRIES]; /** esta √© a mem√≥ria virtual da calculadora */
/** Esses extern s√£o porque n√£o se implementa c√≥digo em arquivos de cabe√ßalho, *.h -- copie para o symtab.c e retirem o extern -- 
 *  l√° voc√™s implementam as fun√ß√µes e depois transformem suas chamadas e acesso aos seus atributos na forma de a√ß√µes sem√¢nticas
 *  no parser.c (estudem criteriosamente as linhas onde essas a√ß√µes aparecer√£o). As declara√ß√µes de tipo e defini√ß√£o de constante
 *  permanecem neste c√≥digo e ser√£o utilizadas pelo symtab.c atrav√©s de #include <symtab.h>
 *
 *
 ***  ***/

